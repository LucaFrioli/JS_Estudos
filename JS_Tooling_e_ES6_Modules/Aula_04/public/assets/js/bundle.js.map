{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA,IAAMA,IAAI,YAAS;AACnB,IAAMC,QAAQ,UAAU;AACxB,IAAMC,GAAG,GAAG,EAAE;AACd,SAASC,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACf,OAAOD,CAAC,GAAGC,CAAC;AAChB;AAEO,SAASC,KAAKA,CAAA,EAAG;EAAE;EACtBC,OAAO,CAACC,GAAG,iBAAiB,CAAC;AACjC;AAG2D;;;;;;;;;;;;;;;;ACZ3D,SAASG,MAAMA,CAACP,CAAC,EAAEC,CAAC,EAAE;EAClB,OAAOD,CAAC,GAAGC,CAAC;AAChB;AACA;;AAEA,SAASO,UAAUA,CAACR,CAAC,EAAEC,CAAC,EAAE;EACtB,OAAOD,CAAC,GAAGC,CAAC;AAChB;AAEO,IAAMQ,MAAM,GAAG,SAATA,MAAMA,CAAIT,CAAC,EAAEC,CAAC;EAAA,OAAKD,CAAC,GAAGC,CAAC;AAAA;AAEI;;AAEzC;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACfO,IAAMS,MAAM;EACf,SAAAA,OAAYd,IAAI,EAAEC,QAAQ,EAAE;IAAAc,eAAA,OAAAD,MAAA;IACxB,IAAI,CAACd,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EAACe,YAAA,CAAAF,MAAA;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAC,iBAAA,EAAmB;MACfZ,OAAO,CAACC,GAAG,IAAAY,MAAA,CAAI,IAAI,CAACpB,IAAI,OAAAoB,MAAA,CAAI,IAAI,CAACnB,QAAQ,CAAE,CAAC;IAChD;EAAC;EAAA,OAAAa,MAAA;AAAA;AAGL,IAAMO,EAAE,GAAG,IAAIP,MAAM,4BAA2B,CAAC,CAAC;;;;;;UCXlD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA;;AAE0E;AAC1E;AACkC;;AAElC;AACwD;;AAExDR,+CAAK,CAAC,CAAC;AAEPC,OAAO,CAACC,GAAG,8EAA2Ee,oCAAK,CAAC;AAG5F,IAAMvB,IAAI,YAAS;AACnB,IAAMC,QAAQ,eAAe;AAE7B,IAAMwB,EAAE,GAAG,IAAIF,2CAAY,oBAAoB,CAAC;AAEhDhB,OAAO,CAACC,GAAG,OAAOR,IAAI,EAAEC,QAAQ,EAAEC,yCAAG,4BAAAkB,MAAA,CAAyBjB,6CAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC;AAC1EI,OAAO,CAACC,GAAG,CAACc,0CAAU,EAAEZ,8CAAQ,EAAER,yCAAG,4BAAAkB,MAAA,CAAyBjB,6CAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAC;AAC3EsB,EAAE,CAACN,gBAAgB,CAAC,CAAC;AACrBZ,OAAO,CAACC,GAAG,CAACgB,oDAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1BjB,OAAO,CAACC,GAAG,CAACK,gDAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzBN,OAAO,CAACC,GAAG,CAACI,oDAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,C","sources":["webpack://aula_02/./src/modulo1.js","webpack://aula_02/./src/modulo2.js","webpack://aula_02/./src/person.js","webpack://aula_02/webpack/bootstrap","webpack://aula_02/webpack/runtime/define property getters","webpack://aula_02/webpack/runtime/hasOwnProperty shorthand","webpack://aula_02/webpack/runtime/make namespace object","webpack://aula_02/./src/main.js"],"sourcesContent":["const name = `João`;\nconst lastname = `Silva`;\nconst age = 30;\nfunction sum(x, y) {\n    return x + y;\n}\n\nexport function hello() { //podemos exportar diretamente\n    console.log(`Hello world!!!`)\n}\n\n\nexport { name as default, lastname as lnImport, age, sum };//posso importar por grupo, e utilizar a mascara na hora da exportação com as, além de poder decidir uma variavel padrão para a exportação\n","function subtra(x, y) {\n    return x - y;\n}\n//Primeiramente devemos entender que só pode existir apenas uma exportação padrão (export default) em cada módulo. Isso se deve por conta que quando se faz a chamada do modulo com um nome generico, sem utilizar chaves, ou a palavra reservada as. O interpretador javascript entenderá que estamos nos referindo ao export default\n\nfunction multiplica(x, y) {\n    return x * y;\n}\n\nexport const divide = (x, y) => x / y;\n\nexport { subtra as default, multiplica };//poderiamos adicionar diretamente default na função de modo local  como o seguinte comentário :\n\n// export default function subtra(x, y) {\n//     return x - y;\n// }\n","export class Person {\n    constructor(name, lastname) {\n        this.name = name;\n        this.lastname = lastname;\n    }\n\n    showCompleatName() {\n        console.log(`${this.name} ${this.lastname}`);\n    }\n}\n\nconst np = new Person(`Sou uma`,`pessoa privada`);//veja que np não aprece no objeto de listagem de propriedades acessiveis do modulo, sendo assim np é um atributo privado do modulo person.js\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//modulos são  arquivos que carregam informações que só poderão ser acessadas apartir de exportações/importações, podemos fazer uma analogia de um js module com um país, e o código são os recursos naturais deste país, que ele pode exportar caso necessário, e pode requisitar a um país vizinho um recurso que ele contenha, ou seja ele importa (a função,classe, estrutura de dado... etc.), de um outro país(js module);\n\nimport { name as nameImport, lnImport, age, sum, hello } from \"./modulo1\";//tudo que está dentro de chaves, é o que estamos querendo trazer do modulo.\n//caso tenhamos uma variavel já declarada com um mesmo nome de importação original, podemos atribuir uma mascara de uso para os imports, observe o caso de name e lastname, para atribuir uma mascara de uso utilizamos a palvara reservada as tanto no import como export, name se transforma em nameImport e lastname se transforma em lnImport;\nimport * as teste from \"./person\";//qunado usamos um asterisco e damos uma mascara tudo que esta constido no modulo é importado\n\n//podemos também realizar importações padrões veja o arquivo que o import referencia, isso permite renomear o default conforme a necessidade do consumo do modulo;\nimport subtrai, { divide, multiplica } from \"./modulo2\";//sempre que importar sem chaves ou palavra reservada as, estaremos importando o default, e ainda assim podemos importar o resto dos exports, que é o caso das chaves\n\nhello();\n\nconsole.log(`\\n Aqui está o objeto que contem todos os itens do modulo person.js : `, teste);\n\n\nconst name = `José`;\nconst lastname = `Tiradentes`\n\nconst p1 = new teste.Person(`Maria`, `Madalena`);\n\nconsole.log(`\\n`, name, lastname, age, `\\nA soma de 3 e 5 é ${sum(3, 5)}`);\nconsole.log(nameImport, lnImport, age, `\\nA soma de 7 e 5 é ${sum(7, 5)}`);//utilizando o valor do import\np1.showCompleatName();\nconsole.log(subtrai(7, 2));\nconsole.log(divide(7, 2));\nconsole.log(multiplica(7, 2));\n"],"names":["name","lastname","age","sum","x","y","hello","console","log","default","lnImport","subtra","multiplica","divide","Person","_classCallCheck","_createClass","key","value","showCompleatName","concat","np","nameImport","teste","subtrai","p1"],"sourceRoot":""}